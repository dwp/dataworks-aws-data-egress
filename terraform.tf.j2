terraform {
  required_version = "{{terraform.terraform_13_version}}"

  backend "s3" {
    bucket         = "{{terraform.state_file_bucket}}"
    key            = "terraform/dataworks/dataworks-aws-data-egress.tfstate"
    region         = "{{terraform.state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{terraform.state_file_region}}:{{terraform.state_file_account}}:key/{{terraform.state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

// Get AWS Account ID for credentials in use
data "aws_caller_identity" "current" {}

data "aws_region" "current" {}
data "aws_availability_zones" "available" {}

locals {
  name        = "dataworks-aws-data-egress"
  environment = terraform.workspace == "default" ? "development" : terraform.workspace

  primary_role_index = 0

  account = {
    {%- for key, value in accounts.items() %}
      {{key}} = "{{value}}"
    {%- endfor %}
  }

  tags = {
  {% for key, value in common_tags.items() %}
    {{key}} = "{{value}}"{% endfor %}
    Name         = "dataworks-aws-data-egress"
    Environment  = local.environment
    Project      = "dataworks-aws-data-egress"
    Application  = "dataworks-aws-data-egress"
    Persistence  = "Ignore"
    AutoShutdown = "False"
  }

  common_tags = {
    {%- for key, value in common_tags.items() %}
      {{key}} = "{{value}}"
    {%- endfor %}
    Environment  = local.environment
    Application  = local.name
    Team         = "DataWorks"
  }

  cidr_block = {
  {%- for environment, ranges in cidr_block.items() %}
      {{ environment }} = {
        {%- for key, value in ranges.items() %}
          {{ key }} = "{{ value }}"{% endfor %}
      } {%- endfor %}
  }

    data_egress_ecs_friendly_name = "data-egress-ecs-cluster"
    cluster_name              = replace(local.data_egress_ecs_friendly_name, "-ecs-cluster", "")
    cw_agent_log_group_name_data_egress_ecs = "/app/${local.data_egress_ecs_friendly_name}"
    data_egress_friendly_name = "data-egress-cluster"

    opsmi = {
     {%- for environment, ranges in opsmi.items() %}
         {{ environment }} = {
           {%- for key, value in ranges.items() %}
             {{ key }} = "{{ value }}"{% endfor %}
         } {%- endfor %}
     }

    data_egress = {
     {%- for environment, ranges in data_egress.items() %}
         {{ environment }} = {
           {%- for key, value in ranges.items() %}
             {{ key }} = "{{ value }}"{% endfor %}
         } {%- endfor %}
     }

    rtg = {
     {%- for environment,contents in rtg.items() %}
         {{ environment }} = {
           {%- for key, value in contents.items() %}
             {{ key }} = "{{ value }}"{% endfor %}
         } {%- endfor %}
     }

}

data "terraform_remote_state" "common" {
  backend   = "s3"
  workspace = terraform.workspace

  config = {
    bucket         = "{{terraform.state_file_bucket}}"
    key            = "terraform/dataworks/common.tfstate"
    region         = "{{terraform.state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{terraform.state_file_region}}:{{terraform.state_file_account}}:key/{{terraform.state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "certificate_authority" {
  backend   = "s3"
  workspace = terraform.workspace

  config = {
    bucket         = "{{terraform.state_file_bucket}}"
    key            = "terraform/dataworks/aws-certificate-authority.tfstate"
    region         = "{{terraform.state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{terraform.state_file_region}}:{{terraform.state_file_account}}:key/{{terraform.state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "crypto" {
  backend   = "s3"
  workspace = local.crypto_workspace[local.management_account[local.environment]]
  config = {
    bucket         = "{{terraform.state_file_bucket}}"
    key            = "terraform/dataworks/aws-crypto.tfstate"
    region         = "{{terraform.state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{terraform.state_file_region}}:{{terraform.state_file_account}}:key/{{terraform.state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "aws_sdx" {
  backend   = "s3"
  workspace = terraform.workspace
  config = {
    bucket         = "{{terraform.state_file_bucket}}"
    key            = "terraform/dataworks/aws-sdx.tfstate"
    region         = "{{terraform.state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{terraform.state_file_region}}:{{terraform.state_file_account}}:key/{{terraform.state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "mgmt_ca" {
  backend   = "s3"
  workspace = local.management_account[local.environment]

  config = {
    bucket         = "{{terraform.state_file_bucket}}"
    key            = "terraform/dataworks/aws-certificate-authority.tfstate"
    region         = "{{terraform.state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{terraform.state_file_region}}:{{terraform.state_file_account}}:key/{{terraform.state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"

  }
  }

data "terraform_remote_state" "management" {
  backend   = "s3"
  workspace = local.management_infra_account[local.environment]

  config = {
    bucket         = "{{terraform.state_file_bucket}}"
    key            = "terraform/dataworks/management.tfstate"
    region         = "{{terraform.state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{terraform.state_file_region}}:{{terraform.state_file_account}}:key/{{terraform.state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "snapshot_sender" {
  backend   = "s3"
  workspace = terraform.workspace

  config = {
    bucket         = "{{terraform.state_file_bucket}}"
    key            = "terraform/dataworks/aws-snapshot-sender.tfstate"
    region         = "{{terraform.state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{terraform.state_file_region}}:{{terraform.state_file_account}}:key/{{terraform.state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "internal_compute" {
  backend   = "s3"
  workspace = terraform.workspace

  config = {
    bucket         = "{{terraform.state_file_bucket}}"
    key            = "terraform/dataworks/aws-internal-compute.tfstate"
    region         = "{{terraform.state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{terraform.state_file_region}}:{{terraform.state_file_account}}:key/{{terraform.state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "aws_secretsmanager_secret" "rtg_secret_full_collections" {
  name = local.secret_name_for_rtg_full_collections
}

data "aws_secretsmanager_secret_version" "rtg_secret_full_collections" {
  secret_id = data.aws_secretsmanager_secret.rtg_secret_full_collections.id
}

data "aws_secretsmanager_secret" "rtg_secret_incremental_collections" {
  name = local.secret_name_for_rtg_incremental_collections
}

data "aws_secretsmanager_secret_version" "rtg_secret_incremental_collections" {
  secret_id = data.aws_secretsmanager_secret.rtg_secret_incremental_collections.id
}

provider "aws" {
  version = "~> 3.42.0"
  region  = var.region

  assume_role {
    role_arn = "arn:aws:iam::${lookup(local.account, local.environment)}:role/${var.assume_role}"
  }
}

